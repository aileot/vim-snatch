*snatch.txt*                Snatch texts as i_CTRL-Y/i_CTRL-E

Version: 1.0.0
Author: kaile256 <kaile256acc at gmail.com>
License: MIT license

==============================================================================
CONTENTS                                                       *snatch-contents*

Introduction            |snatch-introduction|
Usage                   |snatch-usage|
  Function                |snatch-function|
  Variable                |snatch-variable|
  Mapping                 |snatch-mapping|
Compatibility           |snatch-compatibility|

==============================================================================
INTRODUCTION                                               *snatch-introduction*


==============================================================================
OVERVIEW                                                       *snatch-overview*

|Snatch| works as the following process:

1. Saving current position, leave current mode.

        Trigger |SnatchReadyPre| and |SnatchReadyPost|.

2. Enter |sneaking| mode.                                        *snatch-sneaking*

        Currently, we have three snatch-strategies:

                - register
                - operator
                - horizontal_motion

3. Get back to saved position, and insert |snatch|ed text.

==============================================================================
USAGE                                                             *snatch-usage*

------------------------------------------------------------------------------
FUNCTION                                                       *snatch-function*

snatch#status()                                               *snatch#status()*

snatch#abort()                                                 *snatch#abort()*

        Forcibly stop |Sneaking| mode (practically, |Normal| mode), staying in
        |Normal| mode, and return |v:true|; besides, instead of |SnatchInsertPre| and
        |SnatchInsertPost|, this function triggers two special |snatch-autocmd|s:
        |SnatchAbortedPre| and |SnatchAbortedPost|. On the other hand, when
        |sneaking| is NOT in progress, do nothing but return |v:false|.
        See also |snatch#cancel()|.

snatch#cancel()                                               *snatch#cancel()*

        Forcibly stop |Sneaking| mode, go back to the starting position in the
        previous mode (|Insert| mode or |Cmdline| mode), and return |v:true|;
        besides, instead of |SnatchInsertPre| and |SnatchInsertPost|, this
        function triggers two special |snatch-autocmd|s: |SnatchCancelledPre| and
        |SnatchCancelledPost|. On the other hand, when |sneaking| is NOT in
        progress, do nothing but return |v:false|.
        See also |snatch#abort()|.

------------------------------------------------------------------------------
VARIABLE                                                       *snatch-variable*

g:snatch#no_default_mappings                     *g:snatch#no_default_mappings*
        (default: 0)

g:snatch#clean_registers                             *g:snatch#clean_registers*
        (default: '0')

        Set in |String|.
        Using the provided mappings like |<Plug>(snatch-hor-or-reg-ctrl-y)|,
        |vim-snatch| will snatch texts but won't override the |registers| set
        in this option, as if to intercept it. (Actually, save & restore the
        |registers|.) The rest of |registers| works as usual, snatching texts.

g:snatch#timeoutlen                                       *g:snatch#timeoutlen*
        (default: 60000)

        Time in milliseconds to cancel |sneaking| process. Set to `-1` to disable
        timeout. Also read |g:snatch#cancellation_policy|.

g:snatch#cancellation_policy                     *g:snatch#cancellation_policy*
        (default: "cancel")

        Set the behavior when |sneaking| is cancelled by the timeout, as
        |g:snatch#timeoutlen|.

        Available: ["abort", "cancel"]

        cancel          Call |snatch#cancel()|.
        abort           Call |snatch#abort()|.

------------------------------------------------------------------------------
MAPPING                                                         *snatch-mapping*

c_<Plug>(snatch-operator)                           *c_<Plug>(snatch-operator)*

        Via |operator-pending-mode|, snatch {motion} text into pending cmdline.
        It might replace such mappings as |c_CTRL-R_CTRL-A|.

x_<Plug>(snatch-into-cmdline)                   *x_<Plug>(snatch-into-cmdline)*

        This is a by-product of |c_<Plug>(snatch-operator)|. Enter |cmdline| mode
        with Visually selected text.

i_<Plug>(snatch-horizontal-ctrl-y)         *i_<Plug>(snatch-horizontal-ctrl-y)*
i_<Plug>(snatch-horizontal-ctrl-e)         *i_<Plug>(snatch-horizontal-ctrl-e)*
i_<Plug>(snatch-horizontal-here)             *i_<Plug>(snatch-horizontal-here)*

        As soon as cursor moves horizontally, it'll snatch {motion} text; as
        long as vertically, it waits for {motion}.

i_<Plug>(snatch-reg-ctrl-y)                       *i_<Plug>(snatch-reg-ctrl-y)*
i_<Plug>(snatch-reg-ctrl-e)                       *i_<Plug>(snatch-reg-ctrl-e)*
i_<Plug>(snatch-reg-here)                           *i_<Plug>(snatch-reg-here)*

        Snatch the text to be registered. Any {motion} won't stop snatching.
        See |g:snatch#clean_registers|.

i_<Plug>(snatch-hor-or-reg-ctrl-y)         *i_<Plug>(snatch-hor-or-reg-ctrl-y)*
i_<Plug>(snatch-hor-or-reg-ctrl-e)         *i_<Plug>(snatch-hor-or-reg-ctrl-e)*
i_<Plug>(snatch-hor-or-reg-here)             *i_<Plug>(snatch-hor-or-reg-here)*

        Mixed mapping of |<Plug>(snatch-horizontal-ctrl-y)| and
        |<Plug>(snatch-reg-ctrl-y)|, and the same applies the rest. For the
        details, follow the respective tags.

                                   *i_<Plug>(snatch-oneshot-hor-or-reg-ctrl-y)*
i_<Plug>(snatch-oneshot-hor-or-reg-ctrl-y)
                                   *i_<Plug>(snatch-oneshot-hor-or-reg-ctrl-e)*
i_<Plug>(snatch-oneshot-hor-or-reg-ctrl-e)
                                     *i_<Plug>(snatch-oneshot-hor-or-reg-here)*
i_<Plug>(snatch-oneshot-hor-or-reg-here)

        Almost same as |i_<Plug>(snatch-hor-or-reg-ctrl-y)| but the
        detection for horizontal motion is one-shot: once cursor moves
        vertically, you have to use |registers| to |snatch| text.

------------------------------------------------------------------------------
AUTOCMD                                                         *snatch-autocmd*

:autocmd User SnatchReadyPre {command}                         *SnatchReadyPre*

        Triggered before any process starts.

:autocmd User SnatchReadyPost {command}                       *SnatchReadyPost*

        Triggered just after |readying| process has done.

:autocmd User SnatchInsertPre {command}                       *SnatchInsertPre*

        Triggered just before |inserting| process starts.

:autocmd User SnatchInsertPost {command}                     *SnatchInsertPost*

        Triggered just after |inserting| process has been done. It also means
        that the current |sneaking| process has been done.

:autocmd User SnatchAbortedPre {command}                     *SnatchAbortedPre*

        Triggered in |snatch#abort()|.

:autocmd User SnatchAbortedPost {command}                   *SnatchAbortedPost*

        Triggered in |snatch#abort()|.

:autocmd User SnatchCancelledPre {command}                 *SnatchCancelledPre*

        Triggered in |snatch#cancel()|.

:autocmd User SnatchCancelledPost {command}               *SnatchCancelledPost*

        Triggered in |snatch#cancel()|.

------------------------------------------------------------------------------
HIGHLIGHT                                                     *snatch-highlight*

SnatchCursor                                                  *hl-SnatchCursor*

        Default:
>
        hi def SnatchCursor cterm=bold gui=bold
                        \ ctermfg=white guifg=white
                        \ ctermbg=magenta guibg=magenta
<
        Used to replace "Cursor" highlight while |sneaking|.

SnatchInsertPos                                            *hl-SnatchInsertPos*

        Default:
>
        hi def SnatchInsertPos cterm=bold,reverse gui=bold,reverse
<
        Used to make current inserting position stand out while |sneaking|.

==============================================================================
COMPATIBILITY                                             *snatch-compatibility*


==============================================================================
vim:ft=help:tw=78:ts=8:sts=8:sw=8:norl:fen:nojs
