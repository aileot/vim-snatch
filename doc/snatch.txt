*snatch.txt*                Snatch texts as i_CTRL-Y/i_CTRL-E

Version: 1.0.0
Author: kaile256 <kaile256acc at gmail.com>
License: MIT license

==============================================================================
CONTENTS                                                       *snatch-contents*

Introduction            |snatch-introduction|
Overview                |snatch-overview|
  Process                 |snatch-process|
Usage                   |snatch-usage|
  Function                |snatch-function|
  Variable                |snatch-variable|
  Mapping                 |snatch-mapping|
  Autocmd                 |snatch-autocmd|
  Highlight               |snatch-highlight|
FAQ                     |snatch-faq|
Compatibility           |snatch-compatibility|

==============================================================================
INTRODUCTION                                               *snatch-introduction*


==============================================================================
OVERVIEW                                                       *snatch-overview*

------------------------------------------------------------------------------
PROCESS                                                         *snatch-process*

                                                             *snatch-snatching*
For conciseness, a series of process provided by this plugin is referred to
in this documentation as |snatching|. Briefly, |snatching| is composed of the
actions in the order:

                                                              *snatch-readying*
1. |Readying|: save current position, and leave current mode.

        1. Trigger |SnatchReadyPre|.
        2. Save current position as insert position.
        3. Leaving current mode (|Insert| or |Cmdline| mode), enter |Normal| mode.
        4. Adjust initial |sneaking| position.
        5. Trigger |SnatchReadyPost|.

                                                              *snatch-sneaking*
2. |Sneaking|: wait for your action.

        1. As soon as |TextYankPost| is triggered, shift into |inserting| process.

        Note:
        The cancellation functions are all supposed to be used in this
        |sneaking| process. For detail, look up the following helptags:
                - |snatch#cancel()|
                - |snatch#abort()|

                                                             *snatch-inserting*
3. |Inserting|: get back to saved position, and insert text.

        1. Trigger |SnatchInsertPre|.
        2. Insert |snatch|ed text.
        3. Trigger |SnatchInsertPost|.

        Note:
        This |inserting| process won't be reached if |snatching| process has
        been cancelled at |sneaking| process.

Note:
|Snatching| would also mean the range detection in |sneaking| process, or even the
entire series of actions from the range detection to the text insertion in
|inserting| process. Probably, this polysemantic usage is hardly confusing.

------------------------------------------------------------------------------
STRATEGIES                                                   *snatch-strategies*

Currently, we only have "register" as the option for |snatching| in |sneaking|
process.

        register                Using |TextYankPost|, intercept the text being
                                about to fill a register.
                                See also |g:snatch#clean_registers|.

==============================================================================
USAGE                                                             *snatch-usage*

------------------------------------------------------------------------------
FUNCTION                                                       *snatch-function*

snatch#abort()                                                 *snatch#abort()*

        Forcibly stop |Sneaking| mode (practically, |Normal| mode), staying in
        |Normal| mode, and return |v:true|; besides, instead of |SnatchInsertPre| and
        |SnatchInsertPost|, this function triggers two special |snatch-autocmd|s:
        |SnatchAbortedPre| and |SnatchAbortedPost|. On the other hand, when
        |sneaking| is NOT in progress, do nothing but return |v:false|.
        See also |snatch#cancel()|.

snatch#cancel()                                               *snatch#cancel()*

        Forcibly stop |Sneaking| mode, go back to the starting position in the
        previous mode (|Insert| mode or |Cmdline| mode), and return |v:true|;
        besides, instead of |SnatchInsertPre| and |SnatchInsertPost|, this
        function triggers two special |snatch-autocmd|s: |SnatchCancelledPre| and
        |SnatchCancelledPost|. On the other hand, when |sneaking| is NOT in
        progress, do nothing but return |v:false|.
        See also |snatch#abort()|.

------------------------------------------------------------------------------
VARIABLE                                                       *snatch-variable*

g:snatch_status                                               *g:snatch_status*

        Readonly |Dictionary| to represent the last |snatching| status.

        Keys:

        is_sneaking     Return `v:true` if |sneaking|; otherwise, `v:false`.
        strategies      Return a |List| of the last available |snatch-strategies|.
                        Currently it's just reserved by "register".
        prev_mode       Return a character, either 'i' as |Insert| mode or one
                        of the value you see in |getcmdtype()| as |Cmdline| mode.
        win_id          Return the |window-ID| for the window where current
                        |sneaking| has started. It only matters if "prev_mode"
                        returns 'i'.
        insert_pos      Return the |List| in the format that |getcurpos()|
                        returns. It only matters if "prev_mode" returns 'i'.
        pre_keys        Returns the predefined key sequence to adjust cursor
                        to expected position in |snatch-readying| process. It
                        only matters if "prev_mode" returns 'i'.

g:snatch#no_default_mappings                     *g:snatch#no_default_mappings*
        (default: 0)

                                      *g:snatch#force_restore_cursor_highlight*
g:snatch#force_restore_cursor_highlight
        (default: 1)

        Set in |Number|. Set it to `0` to disable this option; otherwise, prepend
        "a:Cursor" to `&guicursor` (in the lowest priority) after having
        snatched so that cursor highlight reflects `hl-Cursor`.

        (In theory, this workaround causes no problems, but if you have any
        issues with this option, please reopen issue #46 or, referring to the
        issue, open a new one and report the problem.)

g:snatch#clean_registers                             *g:snatch#clean_registers*
        (default: '0')

        Set in |String|.
        Using the provided mappings like |<Plug>(snatch-hor-or-reg-ctrl-y)|,
        |vim-snatch| will snatch texts but won't override the |registers| set
        in this option, as if to intercept it. (Actually, save & restore the
        |registers|.) The rest of |registers| works as usual, snatching texts.

g:snatch#timeoutlen                                       *g:snatch#timeoutlen*
        (default: 60000)

        Time in milliseconds to cancel |sneaking| process. Set to `-1` to disable
        timeout. Also read |g:snatch#cancellation_policy|.

g:snatch#cancellation_policy                     *g:snatch#cancellation_policy*
        (default: "cancel")

        Set the behavior when |sneaking| is cancelled by the timeout, as
        |g:snatch#timeoutlen|.

        Available: ["abort", "cancel"]

        cancel          Call |snatch#cancel()|.
        abort           Call |snatch#abort()|.

                                      *g:snatch#flash_duration_for_insertchars*
g:snatch#flash_duration_for_insertchars
        (default: 450)

        Time in milliseconds to flash snatched characters.

                                   *g:snatch#ins#attempt_to_escape_from_window*
g:snatch#ins#attempt_to_escape_from_window
        (default: "\<C-c>\<C-w>p")

        Set in |String|. If an empty string, do nothing; otherwise, when cursor
        attempts to go out of current window, do as if keys are typed as the
        given string, non-recursively, in |Normal| mode before entering |sneaking|
        process. This option is useful, for example, in editing git-commit
        message.

        Note:
        Internally, it uses |:normal|!. Please also read its descriptions if you
        have problems with this |vim-snatch| option.

g:snatch#cmd#position_marker                     *g:snatch#cmd#position_marker*
        (default: 'â”ƒ')

        A |String| as a marker to be inserted in imitated pending |cmdline| text
        in |sneaking| when the previous mode was |cmdline| mode.

------------------------------------------------------------------------------
MAPPING                                                         *snatch-mapping*

c_<Plug>(snatch-by-register)                     *c_<Plug>(snatch-by-register)*

        Leaving |Cmdline-mode|, |vim-snatch| waits for |TextYankPost| to be
        triggered; then, snatch the text to be registered into pending
        cmdline. See also |snatch-process|.

        Set arbitrary |registers| in |g:snatch#clean_registers| to restore the
        old value after |snatch-process|.

i_<Plug>(snatch-by-register)                     *i_<Plug>(snatch-by-register)*
s_<Plug>(snatch-by-register)                     *s_<Plug>(snatch-by-register)*

        Leaving |Insert-mode|, |vim-snatch| waits for |TextYankPost| to be
        triggered; then, snatch the text to be registered into the leaving
        position. See also |snatch-process|.

        Set arbitrary |registers| in |g:snatch#clean_registers| to restore the
        old value after |snatch-process|.

i_<Plug>(snatch-by-register-ctrl-y)       *i_<Plug>(snatch-by-register-ctrl-y)*
s_<Plug>(snatch-by-register-ctrl-y)       *s_<Plug>(snatch-by-register-ctrl-y)*

        Same as |<Plug>(snatch-by-register)|, but adjust cursor just above.
        The names are derived from |i_CTRL-Y|.

i_<Plug>(snatch-by-register-ctrl-e)       *i_<Plug>(snatch-by-register-ctrl-e)*
s_<Plug>(snatch-by-register-ctrl-e)       *s_<Plug>(snatch-by-register-ctrl-e)*

        Same as |<Plug>(snatch-by-register)|, but adjust cursor just below.
        The names are derived from |i_CTRL-E|.

i_<Plug>(snatch-completion-confirm)       *i_<Plug>(snatch-completion-confirm)*

        Confirm the currently selected match. It is just a wrapper of `<C-y>`
        to describe the behavior; thus, make sure `pumvisible()` returns `1` to
        use this mapping. See also |popupmenu-keys|.
>
        imap <expr> <C-y> pumvisible()
        \ ? '<Plug>(snatch-completion-confirm)'
        \ : '<Plug>(snatch-oneshot-hor-or-reg-ctrl-y)'
>
i_<Plug>(snatch-completion-cancel)         *i_<Plug>(snatch-completion-cancel)*

        Cancel completion. It is just a wrapper of `<C-e>` to describe the
        behavior; thus, make sure `pumvisible()` returns `1` to use this mapping.
        See also |popupmenu-keys|.
>
        imap <expr> <C-e> pumvisible()
        \ ? '<Plug>(snatch-completion-cancel)'
        \ : '<Plug>(snatch-oneshot-hor-or-reg-ctrl-e)'
>
------------------------------------------------------------------------------
AUTOCMD                                                         *snatch-autocmd*

:autocmd User SnatchReadyPre {command}                         *SnatchReadyPre*

        Triggered before any process starts.

:autocmd User SnatchReadyPost {command}                       *SnatchReadyPost*

        Triggered just after |readying| process has done.

:autocmd User SnatchInsertPre {command}                       *SnatchInsertPre*

        Triggered just before |inserting| process starts.

:autocmd User SnatchInsertPost {command}                     *SnatchInsertPost*

        Triggered just after |inserting| process has been done. It also means
        that the current |sneaking| process has been done.

:autocmd User SnatchAbortedPre {command}                     *SnatchAbortedPre*

        Triggered in |snatch#abort()|.

:autocmd User SnatchAbortedPost {command}                   *SnatchAbortedPost*

        Triggered in |snatch#abort()|.

:autocmd User SnatchCancelledPre {command}                 *SnatchCancelledPre*

        Triggered in |snatch#cancel()|.

:autocmd User SnatchCancelledPost {command}               *SnatchCancelledPost*

        Triggered in |snatch#cancel()|.

------------------------------------------------------------------------------
HIGHLIGHT                                                     *snatch-highlight*

SnatchCursor                                                  *hl-SnatchCursor*

        Default:
>
        hi def SnatchCursor cterm=bold gui=bold
                        \ ctermfg=white guifg=white
                        \ ctermbg=magenta guibg=magenta
<
        Used to replace "Cursor" highlight in |sneaking| process.

SnatchInsertPos                                            *hl-SnatchInsertPos*

        Default:
>
        hi def SnatchInsertPos cterm=bold,reverse gui=bold,reverse
<
        Used to make current inserting position stand out in |sneaking| process.

SnatchInsertChars                                        *hl-SnatchInsertChars*

        Default:
>
        hi def SnatchInsertChars ctermfg=black guifg=black
                        \ ctermbg=lightgreen guibg=lightgreen
<

        Used to make the |snatch|ed characters stand out after |sneaking| process.

==============================================================================
FAQ                                                                 *snatch-faq*

Q. Can we use |operator| directly?
A. Add the following snippet in your vimrc.
>
        " Make sure g:snatch#clean_registers contains '0'.
        imap <C-y> <Plug>(snatch-by-register-ctrl-y)y
        " Or use <SID> if your `y` could be mapped:
        inoremap <SID>y y
        imap <SID>(snatch-operator-ctrl-y)
        \ <Plug>(snatch-by-register-ctrl-y)<SID>y
        imap <C-y> <SID>(snatch-operator-ctrl-y)

        " It's also applied to `cmap`.
        cmap <C-o> <Plug>(snatch-by-register)y
<
Q. Notify me when snatching is aborted/cancelled.
A. Add the following snippet in your vimrc.
>
        augroup snatch-notifications
          autocmd!
          autocmd User SnatchAbortedPost echohl ErrorMsg
          autocmd User SnatchAbortedPost echo '[snatch] abort'
          autocmd User SnatchAbortedPost echohl Normal

          autocmd User SnatchCancelledPost echohl ErrorMsg
          autocmd User SnatchCancelledPost echo '[snatch] cancel'
          autocmd User SnatchCancelledPost echohl Normal
        augroup END
<
Q. Cursor fails to restore the highlight.
A. Set |g:snatch#force_restore_cursor_highlight| to 1.
>
        let g:snatch#force_restore_cursor_highlight = 1
<
==============================================================================
COMPATIBILITY                                             *snatch-compatibility*

2021-06-17
* Abolish all the "motion" strategy features. You can find the detail in the
  issue #60 of the repository.

2021-06-16
* Remove c_<Plug>(snatch-operator) and x_<Plug>(snatch-into-cmdline) in favor
  of c_<Plug>(snatch-by-register).

2021-04-26
* Remove snatch#status() in favor of g:snatch_status.

==============================================================================
vim:ft=help:tw=78:ts=8:sts=8:sw=8:norl:fen:nojs
